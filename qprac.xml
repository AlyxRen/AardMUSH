<?xml version="1.0" encoding="iso-8859-1"?>

<!DOCTYPE muclient [
   <!ENTITY scholar "false" > 
]>

<!DOCTYPE muclient>
<!-- $Id$ -->

<muclient>
<plugin
   name="qprac"
   author="Renoir"
   id="5b47042f0467547498688cfd"
   language="Lua"
   purpose="Provide the best attack/spell for the current class/tier/level"
   save_state="y"
   date_written="2016-06-28 00:10:00"
   requires="4.73"
   version="0.5"
   >
<description trim="y">
<![CDATA[
qprac and qpract are interchangeable

qspell; Gets all unpracticed spells up to your
        current level, then shows the current queue

qspell fire; gets all unpracticed fire spells up to your
             current level, then shows the current queue.

qprac set scholar; This will set that you're looking at 95
                   as fully practiced. Only needed once.

qprac list; Shows all spells currently in queue. Each entry
            has a [-] and [?]. These are clickable links that
            remove it from the queue and show the spell's help.

qprac help; Shows detailed help documentation on how to use
            these commands.

qprac remove spellname; Removes the spell from the queue.
                        Called automatically by clicking [-]

qprac clear; Clears the queue to practice

qprac next; practices the next spell in the queue.

qprac all; batch sends practice full for each spell.@w
]]>
</description>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>


<triggers>
  <trigger
   enabled="y"
   match="^Skill/Spell List - Brief Version:$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="n"
   name="start_qspell"
   script="start_process"
  >
  </trigger>
  <trigger
   enabled="n"
   match="(.*)"
   regexp="y"
   sequence="101"
   omit_from_output="n"
   name="process_qspell"
   script="process_qspell"
  ></trigger>
  <trigger
   enabled="y"
   match="^End of list\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="n"
   name="finish_qspell"
   script="end_process"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^To see all skills/spells for your class, use 'allspells \<class\>'$"
   regexp="y"
   sequence="100"
   name="display_qspell"
   omit_from_output="y"
  ></trigger>
</triggers>

<aliases>
<alias
   match="^qpract?( help)? .*$"
   enabled="y"
   regexp="y"
   sequence="101"
   ignore_case="y"
   script="qprac_help"
></alias>
<alias
   match="^qpract? remove (?P<spell>.*)$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="remove_spell"
></alias>
<alias
   match="^qpract? clear$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="remove_all"
></alias>
<alias
   match="^qpract? list$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="display_qspell_list"
></alias>
<alias
   match="^qpract? next$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="qprac_next"
></alias>
<alias
   match="^qpract? all$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="qprac_all"
></alias>
<alias
   match="^qpract? scholar$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="toggle_scholar"
></alias>
<alias
   match="^qspell( [a-zA-Z]*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="find_spells"
></alias>
</aliases>

<script>
<![CDATA[

function _gmcp(target)
    res, gmcparg = CallPlugin( "3e7dedbe37e44942dd46d264", "gmcpval", target)
    return gmcparg
end

scholar = true
spell_name_fg = "white"
spell_name_bg = "black"
spell_remove_fg = "lightred"
spell_remove_bg = spell_name_bg
spell_show_fg = "lightblue"
spell_show_bg = spell_name_bg

list = {}

function qprac_help()
    Note("This is help documentation")
end

function qprac_next()
    local head = table.remove(list, 1)
    Send("practice "..head.." full")
end

function qprac_all()
    for i,v in ipairs(list) do
        Send("practice "..v.." full")
    end
    list = {}
end

function toggle_scholar(name, line, wildcards)
    if scholar then
        ColourNote(spell_show_fg, spell_show_bg, "Do not have the Scholar Wish.")
        scholar = false
    else
        ColourNote(spell_show_fg, spell_show_bg, "Have the Scholar Wish.")
        scholar = true
    end
end

function find_spells(alias, line, wildcards)
    local level  = tonumber(_gmcp("char.status.level"))
    local category = wildcards[1]
    local prac = scholar and 94 or 84

    SendNoEcho("qspell 1 "..level..category.." 0 "..prac)
end

function remove_all(trigger, line, wildcards)
    list = {}
    ColourNote(spell_name_fg, spell_name_bg, "Cleared the list of spells.")
end

function remove_spell(trigger, line, wildcards)
    local new_list = {}
    for i,v in ipairs(list) do
        if v ~= wildcards.spell then
            new_list[#new_list+1] = v
        end
    end
    list = new_list
    ColourNote(spell_name_fg, spell_name_bg, wildcards.spell.." has been removed.")
end

function start_process()
    list = {}
    EnableTrigger("process_qspell", 1)
    DeleteLines(1)

    ColourNote(spell_name_fg, spell_name_bg, "Found the following spells and added to queue:")
end
function process_qspell(trigger, line, wildcards)
    -- Note(wildcards[1])
    DeleteLines(1)
    -- ColourNote(spell_name_fg, spell_name_bg, "Scholar: "..(scholar and "True!" or "False!"))
    local spell = wildcards[1]:gsub("^%s+", ""):gsub("%s+$", "")
    for i,v in ipairs(list) do
        if v == spell then
            return nil
        end
    end
    list[#list+1] = spell
    display_spell(spell)
end
function end_process()
      EnableTrigger("process_qspell", 0)
      DeleteLines(1)
      ColourNote(spell_name_fg, spell_name_bg, "End of list.")
end
function display_qspell_list(trigger, line, wildcards)
    DeleteLines(1)
    for i,spell in ipairs(list) do
        display_spell(spell)
    end
end
function display_spell(spell_name)
    Hyperlink("qprac remove "..spell_name, "[-] ", "Remove "..spell_name, spell_remove_fg, spell_remove_bg)
    Hyperlink("showspell "..spell_name, "[?] ", "Show Spell "..spell_name, spell_show_fg, spell_show_bg)
    ColourTell(spell_name_fg, spell_name_bg, spell_name)
    Note()

end


function OnPluginInstall()
    if GetVariable("scholar") == 'true' then
        scholar = true
    else
        scholar = false
    end
end -- OnPluginConnect

function OnPluginSaveState()
    if scholar then
        SetVariable("scholar", "true")
    else
        SetVariable("scholar", "false")
    end
end -- OnPluginSaveState
]]>
</script>

</muclient>
